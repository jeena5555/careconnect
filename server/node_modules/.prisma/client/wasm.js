
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountName: 'accountName',
  password: 'password',
  role: 'role'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  prefix: 'prefix',
  firstName: 'firstName',
  lastName: 'lastName',
  personalId: 'personalId',
  gender: 'gender',
  nationality: 'nationality',
  dob: 'dob',
  height: 'height',
  weight: 'weight',
  bloodGroup: 'bloodGroup',
  phone: 'phone',
  address: 'address',
  allergy: 'allergy',
  registrationDate: 'registrationDate',
  accountId: 'accountId'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  description: 'description',
  departmentId: 'departmentId',
  accountId: 'accountId'
};

exports.Prisma.NurseScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  accountId: 'accountId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.MedicineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  price: 'price',
  stockQuantity: 'stockQuantity',
  expiryDate: 'expiryDate',
  instruction: 'instruction'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  appointmentDate: 'appointmentDate',
  appointmentStartTime: 'appointmentStartTime',
  appointmentEndTime: 'appointmentEndTime',
  createdAt: 'createdAt',
  patientId: 'patientId',
  doctorId: 'doctorId',
  symptom: 'symptom',
  appointmentStatus: 'appointmentStatus'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  prescriptionDetail: 'prescriptionDetail',
  prescriptionDate: 'prescriptionDate',
  appointmentId: 'appointmentId',
  prescriptionStatus: 'prescriptionStatus'
};

exports.Prisma.PrescriptionMedicinesScalarFieldEnum = {
  prescriptionId: 'prescriptionId',
  medicineId: 'medicineId',
  quantity: 'quantity',
  duration: 'duration'
};

exports.Prisma.TreatmentTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  cost: 'cost'
};

exports.Prisma.TreatmentScalarFieldEnum = {
  id: 'id',
  treatmentTypeId: 'treatmentTypeId',
  details: 'details',
  diagnose: 'diagnose',
  appointmentId: 'appointmentId'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  total: 'total',
  createdAt: 'createdAt',
  appointmentId: 'appointmentId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ROLE = exports.$Enums.ROLE = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE'
};

exports.Prefix = exports.$Enums.Prefix = {
  MR: 'MR',
  MRS: 'MRS',
  MISS: 'MISS'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.BloodGroup = exports.$Enums.BloodGroup = {
  A: 'A',
  B: 'B',
  AB: 'AB',
  O: 'O'
};

exports.Status = exports.$Enums.Status = {
  NotTreated: 'NotTreated',
  Treated: 'Treated'
};

exports.PrescriptionStatus = exports.$Enums.PrescriptionStatus = {
  MedicationGiven: 'MedicationGiven',
  MedicationNotGiven: 'MedicationNotGiven'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Patient: 'Patient',
  Doctor: 'Doctor',
  Nurse: 'Nurse',
  Department: 'Department',
  Medicine: 'Medicine',
  Appointment: 'Appointment',
  Prescription: 'Prescription',
  PrescriptionMedicines: 'PrescriptionMedicines',
  TreatmentType: 'TreatmentType',
  Treatment: 'Treatment',
  Invoice: 'Invoice'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
